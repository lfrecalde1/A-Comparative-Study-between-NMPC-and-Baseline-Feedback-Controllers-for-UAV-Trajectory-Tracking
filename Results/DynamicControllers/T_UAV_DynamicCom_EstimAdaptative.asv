%******************************************************************************************************************
%************************************ SEGUIMIENTO DE TRAYECTORIA **************************************************
%************************************* ROBOT MANIPULADOR A√âREO *****************************************************
%******************************************************************************************************************
clc; clear all; close all; warning off % Inicializacion

ts = 0.1;       % Tiempo de muestreo
tfin = 300;      % Tiempo de simulaci√≥n
t = 0:ts:tfin;
load("chi_values.mat");
a=0;
b=0;
L=[a;b];
chi_values(:,1) = chi';
chi_real(:,1) = chi';
%% Variables definidas por la TRAYECTORIA y VELOCIDADES deseadas
[xd, yd, zd, psid, xdp, ydp, zdp, psidp] = Trayectorias(3,t);
%% GENERALIZED DESIRED SIGNALS
hd = [xd; yd; zd; psid];
hdp = [xdp;ydp;zdp;psidp];

%% a) Posiciones iniciales del UAV
xu(1) = 0; 
yu(1) = 0; 
zu(1) = 1; 
psi(1)= 0;
h=[xu(1);yu(1);zu(1);psi(1)]
%% Velocidad inicial real del UAV
u_real = [0;0;0;0];
u_realchi = [0;0;0;0];
%% Ganancia Compensacion Dinamica
K = 1;
G = 1;


%******************************************************************************************************************
%***************************************** CONTROLADOR ***********************************************************
%*****************************************************************************************************************
disp('Empieza el programa')


for k=1:length(t)
tic

%% 1) LEY DE CONTROL
vc(:,k) = Vc_UAV(hdp(:,k),hd(:,k),xu(k),yu(k),zu(k),psi(k)); 
ul(k)=vc(1,k); um(k)=vc(2,k); un(k)=vc(3,k); w(k)=vc(4,k);
%% 2) ACELERATIONS VCP 
if k>1
ulp(k)=(ul(k)- ul(k-1))/ts;
ump(k)=(um(k)- um(k-1))/ts;
unp(k)=(un(k)- un(k-1))/ts;
wp(k) =(w(k)- w(k-1))/ts;
else
ulp(k)=ul/ts;   
ump(k)=um/ts; 
unp(k)=un/ts; 
wp(k) =w/ts; 
end
vcp(:,k) = [ulp(k);ump(k);unp(k);wp(k)];

%% DYNAMIC COMPENSATION
vref(:,k) = dynamic_compensation_UAV(vcp(:,k), vc(:,k), u_real(:,k), chi_values, K, G, L, ts);
%% DYNAMIC ESTIMATION
[Test(:,k),chi_estimados(:,k+1)] = estimadaptive_dymanic_UAV(chi_estimados(:,k),vcp(:,k), vc(:,k), v(:,k), hd(:,k), h(:,k) ,1, L, ts);
vref(:,k)= vc(:,k)+Test(:,k);
%% 2) DINAMICA DEL UAV (VELOCIDAD Y POSICION)
u_real(:, k+1) = system_dynamic(chi_real(:,k), u_real(:,k), vref(:,k), psi(k), L,ts);

% Integracion numerica metodo Runge-Kutta 
h(:,k+1) = h(:,k)+ UAV_RK4(h(:,k),u_real(:,k+1),ts);
xu(k+1) = h(1,k+1);
yu(k+1) = h(2,k+1);
zu(k+1) = h(3,k+1);      
psi(k+1) = Angulo(h(4,k));

% Perturvacion
minimo = -0.00;
maximo =  0.00;
noise(:,k)  =  (maximo-minimo) .* rand(19,1) + minimo;
chi_real(:,k+1) = chi_real(:,k) + noise(:,k);

%% 3) Tiempo de m√°quina   
dt(k) = toc;
end
disp('Fin de los calculos')

%*************************************************************************%
%**************ANIMACION SEGUIMIENTO DE TRAYECTORIA **********************%
%% ***********************************************************************%
disp('Animacion RUN')

% 1) Par√°metros del cuadro de animacion
figure(1)
axis equal
view(-15,15) % Angulo de vista
cameratoolbar
title ("Simulacion")

% 2) Configura escala y color del UAV
Drone_Parameters(0.02);
H1 = Drone_Plot_3D(xu(1),yu(1),zu(1),0,0,psi(1));hold on


% c) Gr√°fica de la trayectoria deseada
plot3(xd,yd,zd,'--')
xlabel('X [m]'); ylabel('Y [m]'); zlabel('Z [m]');

% 5) Simulaci√≥n de movimiento del manipulador a√©reo
for k=1:50:length(t)  
% a) Eliminas los dibujos anteriores del manipulador a√©reo
delete(H1);
H1 = Drone_Plot_3D(xu(k),yu(k),zu(k),0,0,psi(k)); hold on
% b) Gr√°fica la posici√≥n deseada vs actual en cada frame
plot3(xu(1:k),yu(1:k),zu(1:k),'r')
hold on
plot3(xd(1:k),yd(1:k),zd(1:k),'b')

pause(0.1)
end

disp('FIN Simulaci√≥n RUN')  

%%
%******************************************************************************************************************
%********************************************* GR√?FICAS ***********************************************************
%% ****************************************************************************************************************


% 2) C√°lculos del Error
figure(2)
hxe= xd - xu(1:end-1);
hye= yd - yu(1:end-1);
hze= zd - zu(1:end-1);
psie= Angulo(psid-psi(1:end-1));
plot(hxe), hold on, grid on
plot(hye)
plot(hze)
plot(psie)
legend("hxe","hye","hze","psie")
title ("Errores de posici√≥n")

% 3) Posiciones deseadas vs posiciones reales del extremo operativo del manipulador a√©reo
figure(3)

subplot(4,1,1)
plot(xd)
hold on
plot(xu)
legend("xd","hx")
ylabel('x [m]'); xlabel('s [ms]');
title ("Posiciones deseadas y reales del extremo operativo del manipulador a√©reo")

subplot(4,1,2)
plot(yd)
hold on
plot(yu)
legend("yd","hy")
ylabel('y [m]'); xlabel('s [ms]');

subplot(4,1,3)
plot(zd)
hold on
plot(zu)
grid on
legend("zd","hz")
ylabel('z [m]'); xlabel('s [ms]');

subplot(4,1,4)
plot(Angulo(psid))
hold on
plot(psi)
legend("psid","psi")
ylabel('psi [rad]'); xlabel('s [ms]');

% 3) Posiciones deseadas vs posiciones reales del extremo operativo del manipulador a√©reo
figure(4)


plot(vc(1,20:end))
hold on
plot(u_real(1,20:end))
hold on
plot(vref(1,20:end))
legend("ulc","ul","ul_{ref}")
ylabel('x [m/s]'); xlabel('s [ms]');
title ("Posiciones deseadas y reales del extremo operativo del manipulador a√©reo")

figure(5)
plot(vc(2,20:end))
hold on
plot(u_real(2,20:end))
hold on
plot(vref(2,20:end))
legend("umc","um","um_{ref}")
ylabel('y [m/s]'); xlabel('s [ms]');

figure(6)
plot(vc(3,20:end))
hold on
plot(u_real(3,20:end))
hold on
plot(vref(3,20:end))
legend("unc","un","un_{ref}")
ylabel('z [m/ms]'); xlabel('s [ms]');

figure(7)
plot(vc(4,20:end))
hold on
plot(u_real(4,20:end))
hold on
plot(vref(4,20:end))
legend("wc","w","w_{ref}")
ylabel('psi [rad/s]'); xlabel('s [ms]');
  