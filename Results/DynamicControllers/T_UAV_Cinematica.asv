%******************************************************************************************************************
%************************************ SEGUIMIENTO DE TRAYECTORIA **************************************************
%************************************* UAV *****************************************************
%******************************************************************************************************************
clc; clear all; close all; warning off % Inicializacion
 
ts = 1/20;       % Tiempo de muestreo
tfin = 500;      % Tiempo de simulaci√≥n
t = 0:ts:tfin;

% Variables definidas por la TRAYECTORIA y VELOCIDADES deseadas
global xd yd zd xd_p yd_p zd_p psid psid_p 


%% 1) PUBLISHER TOPICS & MSG ROS

[velControl_topic,velControl_msg] = rospublisher('/m100/velocityControl','geometry_msgs/Twist');
u_ref = [0, 0, 0, 0];
send_velocities(velControl_topic, velControl_msg, u_ref);


%% 1) PUBLISHER TOPICS & MSG ROSARM

q1=0;
q2=0;

[velControl_topic,velControl_msg] = rospublisher('/dynamixel_workbench/cmd_vel','geometry_msgs/Twist');
u_ref_arm = [q1, q2, 0, 0];
send_velocities_arm(velControl_topic, velControl_msg, u_ref_arm);
disp("OK")

%% 2) PUBLISHER TOPICS & MSG ROSARM VECTOR

[set_vel_arm,set_vel_arm_msg] = rospublisher('/dynamixel_workbench/cmd_vel_','sensor_msgs/Joy');

    q1=0;
    q2=0;
    
    set_vel_arm_msg.Axes = [rad2value(q1), rad2value(q2), 0, 0];
    send(set_vel_arm,set_vel_arm_msg);
    
    %%

for k=1:length(t)
    tic;
    q1(k)= sym(0.8 * sin(0.7*k));
    %q1=0.5;
    q2(k)= sym(1 * cos(0.1*k));
    
    set_vel_arm_msg.Axes = [rad2value((q1(k))), rad2value(q2(k)), 0, 0];
    
    send(set_vel_arm,set_vel_arm_msg);
    
    while toc < 
    end
toc
    
  
end



disp("ok")

send(set_vel_arm,set_vel_arm_msg);

%%

armSub = rossubscriber('/dynamixel_workbench/dynamixel_state');

%%

[arm_data] = dynamixeldata(armSub);

%% 2) 

odomSub = rossubscriber('/dji_sdk/odometry');

%while 1
    
% [odo] = odometry(odomSub)
%      
% xu(1) = odo(1);
% yu(1) = odo(2);
% zu(1) = odo(3);    
% psi(1) = odo(4);
% 
% ul(1) = odo(5);
% um(1) = odo(6);
% un(1) = odo(7);
% w(1) = odo(8);

     
xu(1) = 0;
yu(1) = 0;
zu(1) = 1;    
psi(1) = 0;

ul(1) = 0;
um(1) = 0;
un(1) = 0;
w(1) = 0;

% 1) Condiciones iniciales del manipulador a√©reo
     % a) Posiciones iniciales del UAV
%        xu(1) = 0; 
%        yu(1) = 0; 
%         zu(1) = 1; 
%        psi(1)= 0;
     

% 2) Seleccion de trayectoria deseada del manipulador m√≥vil
   % 1 ---> Churo
   % 2 ---> Seno
   % 3 ---> 8
   % 4 ---> Silla de montar
     Trayectoria_funciones(3,t); 

disp('Empieza el programa')

%******************************************************************************************************************
%***************************************** CONTROLADOR ***********************************************************
%*****************************************************************************************************************

for k=1:length(t)
    tic
  
% 1) LEY DE CONTROL DEL MANIPULADOR A√âREO 
     
    % a) Funci√≥n que contiene la ley de control del manipulador a√©reo
    % LEY DE CONTROL
    
    respuesta_uav = Solo_UAV(xd_p(k),yd_p(k),zd_p(k),psid_p(k),xd(k),yd(k),zd(k),psid(k),xu(k),yu(k),zu(k),psi(k)); 
    ul(k) = respuesta_uav(1);
    um(k) = respuesta_uav(2);
    un(k) = respuesta_uav(3);
    w(k)  = respuesta_uav(4); %rad
        
    u_ref = [ul(k), um(k), un(k),  w(k)];
    send_velocities(velControl_topic, velControl_msg, u_ref);
          
    try
    [odo(:,k)] = odometry(odomSub);
    xu(k+1) = odo(1,k);
    yu(k+1) = odo(2,k);
    zu(k+1) = odo(3,k) ;   
    psi(k+1) = Angulo(odo(4,k));
      
    xu_p(k) = odo(5,k);
    yu_p(k) = odo(6,k);
    zu_p(k) = odo(7,k);
         
    catch
          
    xu(k+1) = xu(k);
    yu(k+1) = yu(k);
    zu(k+1) = zu(k) ;   
    psi(k+1) = psi(k);
     
    xu_p(k) = xu_p(k);
    yu_p(k) = yu_p(k);
    zu_p(k) = zu_p(k);
    end
      
    while toc < ts
    end
    
% 3) Tiempo de m√°quina   
     dt(k) = toc;
     
end
disp('Fin de los c√°lculos')
u_ref = [0, 0, 0, 0];
send_velocities(velControl_topic, velControl_msg, u_ref);
%******************************************************************************************************************
%********************************* ANIMACI√ìN SEGUIMIENTO DE TRAYECTORIA ******************************************
%% ******************************************************************************************************************
disp('Simulaci√≥n RUN')

% 1) Par√°metros del cuadro de animacion
  figure(1)
  axis equal
  view(-15,15) % Angulo de vista
  cameratoolbar
  title ("Simulaci√≥n")
  
% 2) Configura escala y color del UAV
 Drone_Parameters(0.02);
 H1 = Drone_Plot_3D(xu(1),yu(1),zu(1),0,0,psi(1));hold on
 

% 3) Dimensiones del brazo rob√≥tico
  

% 4) Dibujo inicial del manipulador a√©reo

  % a) Gr√°fica inicial del brazo
  
  
  % b) Gr√°fica inicial del UAV  

  
  % c) Gr√°fica de la trayectoria deseada
  plot3(xd,yd,zd,'--')
  xlabel('X [m]'); ylabel('Y [m]'); zlabel('Z [m]');
  
% 5) Simulaci√≥n de movimiento del manipulador a√©reo
  for k=1:4:length(t)  
  % a) Eliminas los dibujos anteriores del manipulador a√©reo
    delete(H1);
    H1 = Drone_Plot_3D(xu(k),yu(k),zu(k),0,0,psi(k)); hold on
  % b) Gr√°fica la posici√≥n deseada vs actual en cada frame
    plot3(xu(1:k),yu(1:k),zu(1:k),'r')
    hold on
    plot3(xd(1:k),yd(1:k),zd(1:k),'b')
    
  % c) Grafica de brazo rob√≥tico
    
    
  % d) Gr√°fica del UAV
    
  
  pause(0.1)
  end
%%
%******************************************************************************************************************
%********************************************* GR√?FICAS ***********************************************************
%% ****************************************************************************************************************

% 1) Igualar columnas de los vectores creados
  xu(:,end)=[];
  yu(:,end)=[];
  zu(:,end)=[];
  psi(:,end)=[];
  
% 2) C√°lculos del Error
  figure(2)
  hxe= xd - xu;
  hye= yd - yu;
  hze= zd - zu;
  psie= Angulo(psid-psi);
  plot(hxe), hold on, grid on
  plot(hye)
  plot(hze)
  plot(psie)
  legend("hxe","hye","hze","psie")
  title ("Errores de posici√≥n")
  
% 3) Posiciones deseadas vs posiciones reales del extremo operativo del manipulador a√©reo
  figure(3)
  
  subplot(4,1,1)
  plot(xd)
  hold on
  plot(xu)
  legend("xd","hx")
  ylabel('x [m]'); xlabel('s [ms]');
  title ("Posiciones deseadas y reales del extremo operativo del manipulador a√©reo")
  
  subplot(4,1,2)
  plot(yd)
  hold on
  plot(yu)
  legend("yd","hy")
  ylabel('y [m]'); xlabel('s [ms]');

  subplot(4,1,3)
  plot(zd)
  hold on
  plot(zu)
  grid on
  legend("zd","hz")
  ylabel('z [m]'); xlabel('s [ms]');

  subplot(4,1,4)
  plot(Angulo(psid))
  hold on
  plot(psi)
  legend("psid","psi")
  ylabel('psi [rad]'); xlabel('s [ms]');
  